star went to restaurent

food -> data
waiter -> API
order -> API request sent to the server
send to kitchen -> API is sent to the server
food storage kitchen -> data base
kitchen -> server
food processens -> data processing happens
star -> browser
tabel -> browser
waiter would be having differnt quisine order -> API would be having different kinds of request(GET, POST, DELETE, UPDATE, UPSERT, etc)
chicken kabab, beef kabab -> getProduct, getAllProduct, getProductById 
waiter's note -> request object
waiter puts the note before chef, chef process the order -> request object goes to the server and handler function process the request
chef -> handler function
prepared hot food -> response object sent by the server
food in a bowl, or plate, or a tray -> response in a json format, in a text format
order written in notes -> API endpoint acociated with the request.
If a customer wants to oder a chicken kabab, -> waiter takes his order and writes it down in a note and sends it to the chef. -> chef comes and confirms that the customer is a not a vegan.

i. If route has two handler functions
sequence of execution of the handler functions
first handler function -> second handler function by using next()

ii. To every handler fuction, three parameters are passed
1 req -> request object : It contains the data sent by the client(frontend) to the server.
2 res -> response object : It contains the data sent by the server to the client(frontend).
3 next -> function to call the next handler function in the sequence.

callback function -> function that is passed as an argument to another function.

if steve makes a promise to return back the borrowed money and he is not able to keep it, then he is a liar.
Promise
if steve is tryinng -> the promise is pending.
steve kept the promise -> the promise is resolved.
steve is not able to keep the promise -> the promise is rejected.
if steve fullfils the promise, the outcome is he is truthful person -> the promise is resolved, data passed to resolved callback function is returned.
if steve is not able to keep the promise, the outcome is he is a liar -> the promise is rejected, data passed to reject callback function is returned.
if steve is able to keep the promise or not would be decided by a third person -> the promise is resolved or rejected is decided by the if condition.
if steve is making a new promise -> we are creating a promise by using new Promise constructor.

new Promise((resolve, reject) => {
    // do something
    if (success) {
        resolve(data);
    } else {
        reject(error);
    }
});

.
. wait for the promise to be resolved or rejected.  true or false, await to the promise
.
.

organisation
code go throw
code understanding 
env files
how to use chatgpt



-----------------------------------------------------------------------------------------------------------

i. What is git and what is github?
-> Git is a version control system that allows you to track changes in your code and collaborate with others. 
GitHub is a platform that hosts Git repositories and provides additional features for collaboration, such as issue tracking, pull requests, and project management.
Simpler term
-> Git is a tool that helps you keep track of changes in your code, while GitHub is a website where you can store and share your code with others.

ii. what is git clone?
-> Git clone is a command used to create a copy of a remote Git repository on your local machine. It downloads all the files, branches, and 
commit history from the remote repository(repository in GitHub) to your local machine.
cammand: git clone <repository-url>


iii. what is git pull?
-> Git pull is a command used to fetch and merge changes from a remote repository into your local branch. It updates your local branch with the latest 
changes from the remote branch.
command: git pull <remote> <branch-name>
git pull origin main

iV how to set remote origin?
-> To set the remote origin for a local Git repository, you can use the following command:
git remote add origin <repository-url> 

v to get the remote origin
git remote get-url --all origin

git add .   --> to add the changes to the staging area

git checkout main  --> to switch to the main branch

vi. what are all the different states of a file in git?
-> In Git, a file can be in one of the following states:
1. Untracked: The file is not being tracked by Git and is not part of the repository.
2. Modified: The file has been changed but not yet staged for commit. 
3. Staged: The file has been added to the staging area and is ready to be committed.
4. Committed: The file has been committed to the local repository.
5. Pushed: The committed changes have been pushed to the remote repository.

% $ git remote get-url --all origin     | This command is used to get the remote URL of the origin repository.
% https://github.com/glena04/ShoppingPortal-Backend.git
% $ git add -A                          | This command is used to add all the changes in the working directory to the staging area.      
% $ git commit -m "learning git"        | This command is used to commit the changes in the staging area with a message. 
% [afham 7f7b419] learning git          
%  2 files changed, 51 insertions(+), 1 deletion(-)
%  create mode 100644 test-git.js
% $ git push origin afham                | This command is used to push the changes in the local branch to the remote repository.
% Enumerating objects: 6, done.
% Counting objects: 100% (6/6), done.
% Delta compression using up to 4 threads
% Compressing objects: 100% (4/4), done.
% Writing objects: 100% (4/4), 1.27 KiB | 62.00 KiB/s, done.
% Total 4 (delta 2), reused 0 (delta 0), pack-reused 0 (from 0)
% remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
% To https://github.com/glena04/ShoppingPortal-Backend.git
%    de175c7..7f7b419  afham -> afham

Please note that in our case the remote repository is GitHub.
But it can be any other remote repository like GitLab, BitBucket, etc.

merge
AB - BC
ABC - ABC  
ABC - BC    X

merge
Hoda -   Hero
HeroHonda - HeroHonda

Dev - main


Remote repository
main - AC
feature - AC
Dev - SC

Examlple:
we have two developers afham star in our team.  repository has three branches main, dev, feature
afham is working on a feature branch and he has made some changes in the code and he has pushed the changes to the remote repository.

start is working on dev branch and he has made some changes in the code and he has pushed the changes to the remote repository.

afham changes in the feature branch was approved by the manager.

so afham will star that, please updated the main branch by pulling the changes.
git checkout main
git pull origin main